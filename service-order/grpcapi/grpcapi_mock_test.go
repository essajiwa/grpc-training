// Code generated by MockGen. DO NOT EDIT.
// Source: grpcapi/server.go

// Package grpcapi is a generated GoMock package.
package grpcapi

import (
	context "context"
	model "orderservice/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIOrderService is a mock of IOrderService interface.
type MockIOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderServiceMockRecorder
}

// MockIOrderServiceMockRecorder is the mock recorder for MockIOrderService.
type MockIOrderServiceMockRecorder struct {
	mock *MockIOrderService
}

// NewMockIOrderService creates a new mock instance.
func NewMockIOrderService(ctrl *gomock.Controller) *MockIOrderService {
	mock := &MockIOrderService{ctrl: ctrl}
	mock.recorder = &MockIOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderService) EXPECT() *MockIOrderServiceMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockIOrderService) GetOrder(ctx context.Context, orderID int64) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockIOrderServiceMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockIOrderService)(nil).GetOrder), ctx, orderID)
}
