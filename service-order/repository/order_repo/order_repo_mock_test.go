// Code generated by MockGen. DO NOT EDIT.
// Source: repository/order_repo/order.go

// Package order_repo is a generated GoMock package.
package order_repo

import (
	context "context"
	product "orderservice/proto/product"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockIProductInfo is a mock of IProductInfo interface.
type MockIProductInfo struct {
	ctrl     *gomock.Controller
	recorder *MockIProductInfoMockRecorder
}

// MockIProductInfoMockRecorder is the mock recorder for MockIProductInfo.
type MockIProductInfoMockRecorder struct {
	mock *MockIProductInfo
}

// NewMockIProductInfo creates a new mock instance.
func NewMockIProductInfo(ctrl *gomock.Controller) *MockIProductInfo {
	mock := &MockIProductInfo{ctrl: ctrl}
	mock.recorder = &MockIProductInfoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductInfo) EXPECT() *MockIProductInfoMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockIProductInfo) GetProduct(ctx context.Context, req *product.ProductID, opts ...grpc.CallOption) (*product.Product, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProduct", varargs...)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockIProductInfoMockRecorder) GetProduct(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockIProductInfo)(nil).GetProduct), varargs...)
}
